cameras:
    camera1:
        type: perspective
        focal_length: 2
        vanishing_point: [000,-1000]
#        type: isometric
#        axis: [0.3, 0.5]

lights:
    light1:
        type: directional
        direction: [0.1, 1, -.5]
        diffuse: .5
        ambient: .3
    light2:
        type: point
        position: [0, -500px, 500px]
        origin: ground
        diffuse: .5
        ambient: .3


styles:
    earth-hatch:
        base: polygons
        lighting: false
        mix: tools
        shaders:
            uniforms:
                    u_hatch: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/hatch_0.png
            blocks:
                global: |
                    vec4 TileTexture(sampler2D tex, float scale) {
                        vec2 IN = TileCoords()*scale;
                        vec2 OUT = TileCoords()*scale*2.;
                        return mix(texture2D(tex,fract(IN)), texture2D(tex,fract(OUT)), fract(u_map_position.z));
                    }
                color: |
                    float pattern = 1.0-TileTexture(u_hatch,3.).a;
                    color.rgb = mix(vec3(0.302,0.302,0.306), vec3(0.976,0.953,0.890), pattern);
    landuse-hatch:
        base: polygons
        mix: earth-hatch
        shaders:
            uniforms:
                    u_hatch: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/hatch_2.png
    paper:
        base: polygons
        texcoords: true
        material:
            normal:
                texture: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/normal-0031.jpg
                mapping: planar
                scale: 0.001
            ambient: 1.
            diffuse: 1.
    tools:
        shaders:
            blocks:
                global: |
                    // Coord System
                    //================================
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                    // Color
                    //================================
                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }
                    // Random & Noise
                    //================================
                    float random(in vec2 _st){
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))*
                            43758.5453123);
                    }
                    float noise (in vec2 _st) {
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) +
                                (c - a)* u.y * (1.0 - u.x) +
                                (d - b) * u.x * u.y;
                    }
                    // Cross Hatch LUT
                    //==============================
                    float hatch( sampler2D hatchmap, vec2 st, float brightness ){
                        st  = fract(st)/3.;
                        brightness = clamp(brightness,0.,0.9999999);
                        vec2 pos1 = vec2(floor(brightness*9.0)/3.,
                                         floor(brightness*3.0)/3.) + st;
                        float minBrightness = clamp(brightness-0.111111111,0.,1.0);
                        vec2 pos2 = vec2(floor(minBrightness*9.0)/3.,
                                         floor(minBrightness*3.0)/3.)+st;
                        return mix(texture2D( hatchmap,fract(pos1) ).a,
                                   texture2D( hatchmap,fract(pos2) ).a,
                                   1.0-fract(brightness*9.0));
                    }
                position: |
                    v_pos = a_position.xyz * 32767.;
    ink-lines:
        base: lines
        mix: tools
        texcoords: true
        lighting: false
        shaders:
            blocks:
                color: |
                    vec2 uv = v_texcoord;
                    color.rgb = mix(vec3(0.302,0.302,0.306),vec3(0.976,0.953,0.890),1.0-(smoothstep(0.0,0.1,uv.x) * smoothstep(0.0,0.1,1.0-uv.x)+noise(uv*vec2(2.,70.)) ));
    flat:
        base: polygons
        lighting: false

    flat_lines:
        base: lines
        lighting: false

    buildingsLines:
        base: lines
        lighting: false
        shaders:
            blocks:
                width: |
                    width *= 0.2+min(pow(position.z*0.006,2.),.6);
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
    buildings:
        base: polygons
        mix: tools
        texcoords: true
        material:
            ambient: 1.
            diffuse: 1.
        shaders:
            uniforms:
                u_hatchmap: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/hatch-0002.png
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                filter: |
                    vec2 uv = v_texcoord;
                    float b = getBrightness(light_accumulator_diffuse.rgb);
                    float pattern = 1.0;
                    if ( dot(v_normal,vec3(0.,0.,1.)) == 0.0 ){
                        // Walls
                        b *=  clamp(uv.y*1.5,0.0,1.0)+0.2;
                        pattern = 1.-hatch(u_hatchmap,uv,b);
                        vec2 edge = vec2(0.1,0.05)*noise(uv*20.);
                        vec2 blend = smoothstep(vec2(0.0),edge,uv)*smoothstep(vec2(0.0),edge,vec2(1.)-uv);
                        pattern = mix(1.0,pattern,blend.x*blend.y);
                    } else {
                        // Roof
                        b *= 1.8;
                        //uv = v_world_position.xy*0.01;
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        uv = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        uv += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        uv *= 5.00;
                        pattern = 1.-hatch(u_hatchmap,uv,b);
                    }
                    color.rgb = mix(vec3(0.302,0.302,0.306),vec3(0.976,0.953,0.890),pattern);
    density:
        base: polygons
        mix: tools
        texcoords: true
        material:
            ambient: 1.
            diffuse: 1.
        shaders:
            uniforms:
                u_hatchmap: https://cdn.rawgit.com/tangrams/tangram-sandbox/gh-pages/styles/imgs/hatch-0002.png
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                filter: |
                    vec2 uv = v_texcoord;
                    float b = getBrightness(light_accumulator_diffuse.rgb);
                    float pattern = 1.0;
                    if ( dot(v_normal,vec3(0.,0.,1.)) == 0.0 ){
                        // Walls
                        b *=  clamp(uv.y*1.5,0.0,1.0)+0.2;
                        pattern = 1.-hatch(u_hatchmap,uv,b);
                        vec2 edge = vec2(0.1,0.05)*noise(uv*20.);
                        vec2 blend = smoothstep(vec2(0.0),edge,uv)*smoothstep(vec2(0.0),edge,vec2(1.)-uv);
                        pattern = mix(1.0,pattern,blend.x*blend.y);
                        color.rgb = mix(vec3(0.302,0.56,1),vec3(0.8,0.8,0.8),pattern);
                        //color.rgb = mix(vec3(0.302,0.56,1),vec3(0.976,0.953,0.890),pattern);
                    }
    windows:
        base: polygons
#        animated: true

        material:
            emission: 0
            diffuse: 1
        # lighting: false

        shaders:
            uniforms:
                u_frequency: 10.
                u_windowColor: [1., 0.7, 0]
                u_buildingColor: [.7, .7, .8] #[.8, .8, .7]
                u_roofColor: [.5, .4, .5]
                u_roofSpectrum: [[1, 1, 0.851],[0.929, 0.973, 0.694],[0.78, 0.914, 0.706],[0.498, 0.804, 0.733],[0.255, 0.714, 0.769],[0.114, 0.569, 0.753],[0.133, 0.369, 0.659],[0.145, 0.204, 0.58],[0.031, 0.114, 0.345]]

            blocks:
                global: |

                    // 3d noise
                    vec4 v_mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
                    vec4 perm(vec4 x){return v_mod289(((x * 34.0) + 1.0) * x);}
                    float noise(vec3 p){
                        vec3 a = floor(p);
                        vec3 d = p - a;
                        d = d * d * (3.0 - 2.0 * d);

                        vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
                        vec4 k1 = perm(b.xyxy);
                        vec4 k2 = perm(k1.xyxy + b.zzww);

                        vec4 c = k2 + a.zzzz;
                        vec4 k3 = perm(c);
                        vec4 k4 = perm(c + 1.0);

                        vec4 o1 = fract(k3 * (1.0 / 41.0));
                        vec4 o2 = fract(k4 * (1.0 / 41.0));

                        vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
                        vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

                        return o4.y * d.y + o4.x * (1.0 - d.y);
                    }

                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);

                color: |
                    vec3 vPos = v_world_position.xyz / u_frequency;
                    vec3 mask = mix(vec3(0.0), vec3(1.0), step(fract(mod(vPos, .9)), vec3(.4, .4, .6)));

                    // Roof
                    if (v_normal.z > .6 || v_normal.z < -.6) {
                        //color.rgb = u_roofColor;
                        //color.rgb -= vec3(vPos.z * .01); // height factor
                    }
                    else {
                        // Wall
                        if (mask.x + mask.y + mask.z > .5) {
                            color.rgb = u_buildingColor;
                            color.rgb -= vec3(vPos.z * .05); // height factor
                        }
                        // Window
                        else {
                            float noiseColor = 2. * noise(v_world_position.xyz * 0.1 + (floor(u_time * 5.) / 10.));
                            color.rgb = u_windowColor * noiseColor;

                            material.emission.rgb = color.rgb;
                            material.diffuse = vec4(0.);
                        }
                    }
    points2:
        base: points
        animated: true
        texcoords: true
        lighting: false
        shaders:
            blocks:
                global: |
                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        _pos *= 20.;
                        _pos = _pos.yx;
                        return 1.0-smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                filter: |
                    vec2 st = v_texcoord.xy;
                    float dir = -0.1;
                    if ( v_color.r < 0.5) {
                        if (st.x < 0.5) {
                          dir *= -1.;
                        }
                        st.x = fract(st.x*2.0);
                    }
                    float pattern = getHatch( u_time*dir+st.xy*0.5, 3.1415*0.5, 0.5);
                    color.rgb = vec3(1.000,0,0)* pattern*sin(smoothstep(0.0,1.,st.x)*3.1415);

scene:
    background:
        color: [0.302,0.302,0.306]

sources:
    osm:
        type: TopoJSON
        url: //mountainmath.ca/tiles/{z}/{x}/{y}.topojson
        tile_size: 512
        max_zoom: 15
    # osm:
    #     type: TopoJSON
    #     url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-o7hC53g
    #     max_zoom: 15
    skytrain:
        type: GeoJSON
        url:  /data/skytrain_mode_400.json
    skytrain2:
        type: GeoJSON
        url:  /data/skytrain_mode_800.json

layers:
    earth:
        data: { source: osm }
        draw:
#            earth-hatch:
#                order: 0
#                color: [0.271,0.267,0.243]
            polygons:
                order: 0
                color:  '#c0c0c0' #'#010510' # '#2c2f2f' #'#ddeeee' '#020716' #

    water:
        data: { source: osm }
        draw:
            paper:
                order: 2
                color:   '#99ccff' # '#364a5f' #'#88bbee' '#030b21' # '#040d2a' #
    transit:
        data: {source: osm }
        filter: {kind:["subway"]}
        draw:
             lines:
                 order: 5
                 color: '#ff0000'
                 width: 50
                 outline:
                     color: grey
                     width: 3
    roads:
        data: { source: osm }
        filter:
            not: { highway: service, kind: ["rail"] }
        draw:
            lines:
                order: 4
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: 4
                    color: '#cc6666'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: 4
                    color: lightgrey
                    width: 4
        path:
            filter:
                kind: path
            draw:
                lines:
                    order: 4
                    color: lightgrey
                    width: 1
    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, $zoom: { min: 16 } }
        draw:
            text:
                order: 5
                font:
                    typeface: Bold 10px Helvetica
                    fill: white
                    stroke: { color: black , width: 1 }
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                order: 5
                font:
                    typeface: Bold 14px Helvetica
                    fill: black
                    stroke: { color: white , width: 1 }
    landuse:
        data: { source: osm }
        filter:
            # show smaller landuse areas at higher zooms
            any:
                - { $zoom: { min: 9 }, area: { min: 1000000 } }
                - { $zoom: { min: 10 }, area: { min: 330000 } }
                - { $zoom: { min: 12 }, area: { min: 100000 } }
                - { $zoom: { min: 13 }, area: { min: 10000 } }
                - { $zoom: { min: 15 } }
        draw:
            polygons:
                order: 1
                #interactive: true
                style: flat
        green:
            filter: { kind: [wood, protected_area, park, graveyard, cemetery, forest, recreation_ground, golf_course] }
            draw:
                paper:
                    order: 2
                    color:  '#99cc00' #'#17290c' # '#223d12' # '#38423b' #'#bddec5' '#0c1e1a' #
        blue:
            filter: { kind: [commercial, industrial] }
            draw:
                paper:
                    order: 3
                    color:  '#ccffff'#'#393d3d' #'#C0CDCD'  '#242626' #
        orange:
            filter: { kind: [university] }
            draw:
                paper:
                    order: 3
                    color: '#ff99ff' # '#143c40' # '#413e3a' # '#D9CFC3'  '#292724'
#    skytrain:
#        data: {source: skytrain}
#        draw:
#            density:
#                interactive: true
#                order: 20
#                extrude: |
#                    function(){
#                        //return feature['Transit 400']/feature['Mode Share Total 400']*1000;
#                        return feature['Mode Share Total 400']>0 ? feature['Transit 400']/feature['Mode Share Total 400']*1000 : 0;
#                    }
#                color: [1.0,0.55,0.0]
#    skytrain2:
#        data: {source: skytrain2}
#        draw:
#            density:
#                interactive: true
#                order: 20
#                extrude: |
#                    function(){
#                        //return feature['Transit 800']/feature['Mode Share Total 800']*1000;
#                        return feature['Mode Share Total 800']>0 ? feature['Transit 800']/feature['Mode Share Total 800']*1000 : 0
#                    }
#                color: [0.8,0.8,0]

